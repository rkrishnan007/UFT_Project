/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘FlightReservation_Rest.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir191 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	Directory.SetCurrentDirectory(this._context.ScriptPath);
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.Sequence19 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence19");
            _flow.RESTActivityV26 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV26Input,RESTActivityV26Output>(_context,"RESTActivityV26");
            _flow.RESTActivityV27 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV27Input,RESTActivityV27Output>(_context,"RESTActivityV27");
            _flow.RESTActivityV215 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV215Input,RESTActivityV215Output>(_context,"RESTActivityV215");
            _flow.ConcatenateStringsActivity18 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity18");
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence19);
            this.Activities.Add (_flow.Loop2);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.Sequence19.Comment = @"";
            _flow.Sequence19.IconPath = @"";
            _flow.Sequence19.Name = @"Sequence19";
            _flow.Sequence19.Activities.Add (_flow.RESTActivityV26);
            _flow.Sequence19.Activities.Add (_flow.RESTActivityV27);
            _flow.Sequence19.Activities.Add (_flow.RESTActivityV215);
            _flow.Sequence19.Activities.Add (_flow.ConcatenateStringsActivity18);
            _flow.RESTActivityV26.TextBody = @"";
            _flow.RESTActivityV26.TextXmlBody = @"";
            _flow.RESTActivityV26.FileBody = @"";
            _flow.RESTActivityV26.PostBody = @"";
            _flow.RESTActivityV26.Url = @"http://localhost:8000/Flights_REST/Flights?DepartureCity={London}&ArrivalCity={Los Angeles}	";
            _flow.RESTActivityV26.HttpMethod = @"GET";
            _flow.RESTActivityV26.HttpVersion = @"1.1";
            _flow.RESTActivityV26.Comment = @"";
            _flow.RESTActivityV26.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV26.RequestBodyType = @"Text";
            _flow.RESTActivityV26.ResponseType = @"Text";
            _flow.RESTActivityV26.Name = @"GetFlights_Loc";
            _flow.RESTActivityV26.Proxy.Server = @"";
            _flow.RESTActivityV26.Proxy.Username = @"";
            _flow.RESTActivityV26.Proxy.Password = @"";
            _flow.RESTActivityV26.Authentication.Username = @"";
            _flow.RESTActivityV26.Authentication.Password = @"";
            _flow.RESTActivityV26.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV26.ConnectionType = @"Keep-Alive";
            _flow.RESTActivityV26.Timeout = (int)100000;
            _flow.RESTActivityV26.ClientCertificate.Password = @"";
            _flow.RESTActivityV26.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV26.UseClientCertificate = false;
            _flow.RESTActivityV26.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV26.AllowRedirections = true;
            _flow.RESTActivityV26.ReuseCookies = false;
            _flow.RESTActivityV26.ExpectServerError = false;
            _flow.RESTActivityV26.HanaRequest = false;
            XmlDocument RESTActivityV26_XMLBody_Document = new XmlDocument();
            RESTActivityV26_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV26_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV26.XMLBody = RESTActivityV26_XMLBody_Document;
            XmlDocument RESTActivityV26_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV26_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV26_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV26.RequestMultipartInfoXml = RESTActivityV26_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV26.Multipart=false;
            XmlDocument RESTActivityV26_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV26_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV26_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV26.ExpectedResponseXmlBody = RESTActivityV26_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV26_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV26_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV26_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV26.ExpectedResponseJsonBody = RESTActivityV26_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV26_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV26_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV26_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV26.ExpectedOutputProperties = RESTActivityV26_ExpectedOutputProperties_Document;
            set_RESTActivityV26_checkpoints(_flow.RESTActivityV26);
            _flow.RESTActivityV27.TextBody = @"";
            _flow.RESTActivityV27.TextXmlBody = @"";
            _flow.RESTActivityV27.FileBody = @"";
            _flow.RESTActivityV27.PostBody = @"";
            _flow.RESTActivityV27.Url = @"http://localhost:8000/Flights_REST/Flights/1023";
            _flow.RESTActivityV27.HttpMethod = @"GET";
            _flow.RESTActivityV27.HttpVersion = @"1.1";
            _flow.RESTActivityV27.RequestHeaders = new Pair<string, string>[1];
            _flow.RESTActivityV27.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV27.RequestHeaders[0].Key = @"";
            _flow.RESTActivityV27.RequestHeaders[0].Value = @"";
            _flow.RESTActivityV27.Comment = @"";
            _flow.RESTActivityV27.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV27.RequestBodyType = @"Text";
            _flow.RESTActivityV27.ResponseType = @"Text";
            _flow.RESTActivityV27.Name = @"GetFlight_Num";
            _flow.RESTActivityV27.Proxy.Server = @"";
            _flow.RESTActivityV27.Proxy.Username = @"";
            _flow.RESTActivityV27.Proxy.Password = @"";
            _flow.RESTActivityV27.Authentication.Username = @"";
            _flow.RESTActivityV27.Authentication.Password = @"";
            _flow.RESTActivityV27.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV27.ConnectionType = @"Keep-Alive";
            _flow.RESTActivityV27.Timeout = (int)100000;
            _flow.RESTActivityV27.ClientCertificate.Password = @"";
            _flow.RESTActivityV27.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV27.UseClientCertificate = false;
            _flow.RESTActivityV27.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV27.AllowRedirections = true;
            _flow.RESTActivityV27.ReuseCookies = false;
            _flow.RESTActivityV27.ExpectServerError = false;
            _flow.RESTActivityV27.HanaRequest = false;
            XmlDocument RESTActivityV27_XMLBody_Document = new XmlDocument();
            RESTActivityV27_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV27_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV27.XMLBody = RESTActivityV27_XMLBody_Document;
            XmlDocument RESTActivityV27_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV27_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV27_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV27.RequestMultipartInfoXml = RESTActivityV27_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV27.Multipart=false;
            XmlDocument RESTActivityV27_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV27_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV27_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV27.ExpectedResponseXmlBody = RESTActivityV27_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV27_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV27_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV27_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV27.ExpectedResponseJsonBody = RESTActivityV27_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV27_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV27_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV27_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV27.ExpectedOutputProperties = RESTActivityV27_ExpectedOutputProperties_Document;
            set_RESTActivityV27_checkpoints(_flow.RESTActivityV27);
            _flow.RESTActivityV215.TextBody = @"";
            _flow.RESTActivityV215.TextXmlBody = @"";
            _flow.RESTActivityV215.FileBody = @"";
            _flow.RESTActivityV215.PostBody = @"";
            _flow.RESTActivityV215.Url = @"http://localhost:8000/Flights_REST/FlightOrders/";
            _flow.RESTActivityV215.HttpMethod = @"POST";
            _flow.RESTActivityV215.HttpVersion = @"1.1";
            _flow.RESTActivityV215.RequestHeaders = new Pair<string, string>[1];
            _flow.RESTActivityV215.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV215.RequestHeaders[0].Key = @"Content-Type";
            _flow.RESTActivityV215.RequestHeaders[0].Value = @"text/xml";
            _flow.RESTActivityV215.Comment = @"";
            _flow.RESTActivityV215.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV215.RequestBodyType = @"Xml";
            _flow.RESTActivityV215.ResponseType = @"Xml";
            _flow.RESTActivityV215.Name = @"PostOrder";
            _flow.RESTActivityV215.Proxy.Server = @"";
            _flow.RESTActivityV215.Proxy.Username = @"";
            _flow.RESTActivityV215.Proxy.Password = @"";
            _flow.RESTActivityV215.Authentication.Username = @"";
            _flow.RESTActivityV215.Authentication.Password = @"";
            _flow.RESTActivityV215.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV215.ConnectionType = @"Keep-Alive";
            _flow.RESTActivityV215.Timeout = (int)100000;
            _flow.RESTActivityV215.ClientCertificate.Password = @"";
            _flow.RESTActivityV215.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV215.UseClientCertificate = false;
            _flow.RESTActivityV215.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV215.AllowRedirections = true;
            _flow.RESTActivityV215.ReuseCookies = false;
            _flow.RESTActivityV215.ExpectServerError = false;
            _flow.RESTActivityV215.HanaRequest = false;
            XmlDocument RESTActivityV215_XMLBody_Document = new XmlDocument();
            RESTActivityV215_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV215_XMLBody_Document.LoadXml(
@"  <FlightOrderDetails xmlns=""HP.SOAQ.SampleApp"">
  <Class>Business</Class>
  <CustomerName>Peter Lopez</CustomerName>
  <DepartureDate>2025-01-14</DepartureDate>
  <FlightNumber>17979</FlightNumber>
  <NumberOfTickets>21</NumberOfTickets>
  </FlightOrderDetails>");
            _flow.RESTActivityV215.XMLBody = RESTActivityV215_XMLBody_Document;
            XmlDocument RESTActivityV215_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV215_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV215_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV215.RequestMultipartInfoXml = RESTActivityV215_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV215.Multipart=false;
            XmlDocument RESTActivityV215_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV215_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV215_ExpectedResponseXmlBody_Document.LoadXml(
@"<?xml version=""1.0"" encoding=""UTF-8""?>
<CreatedOrderParams xmlns:i=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""HP.SOAQ.SampleApp"">
    <OrderNumber>104</OrderNumber>
    <TotalPrice>7537.74</TotalPrice>
</CreatedOrderParams>
");
            _flow.RESTActivityV215.ExpectedResponseXmlBody = RESTActivityV215_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV215_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV215_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV215_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV215.ExpectedResponseJsonBody = RESTActivityV215_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV215_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV215_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV215_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV215.ExpectedOutputProperties = RESTActivityV215_ExpectedOutputProperties_Document;
            set_RESTActivityV215_checkpoints(_flow.RESTActivityV215);
            _flow.ConcatenateStringsActivity18.Prefix = @"Order No is created as :";
            _flow.ConcatenateStringsActivity18.Suffix = @"{Step.ResponseXmlBody.RESTActivityV215.OrderNumber}";
            _flow.ConcatenateStringsActivity18.Comment = @"";
            _flow.ConcatenateStringsActivity18.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity18.Name = @"OrderConfirmation";
            VTDPropertyInfoBase pi383 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='CreatedOrderParams'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter193 = new VTDXPathGetter(pi383,XmlTypeCode.UnsignedByte);
            VTDPropertyInfoBase pi384 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter191 = new VTDObjectSetter(pi384);
            binding_setter191 = new StringFormaterDecorator(binding_setter191,"{Step.ResponseXmlBody.RESTActivityV215.OrderNumber}");
            bind_dir191 = new BindDirection(_flow.RESTActivityV215,binding_getter193,binding_setter191,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity18.InDirections.Add(bind_dir191);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    